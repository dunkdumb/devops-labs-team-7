name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality and Testing
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json found, skipping npm install"
          fi

      - name: Lint HTML files
        run: |
          echo "Checking HTML files for basic validation..."
          Get-ChildItem public/*.html | ForEach-Object {
            $file = $_.FullName
            echo "Validating $file"
            $content = Get-Content $file -Raw
            if ($content -match "<!DOCTYPE html>") {
              echo "‚úÖ $file has proper DOCTYPE"
            } else {
              echo "‚ùå $file missing DOCTYPE"
              exit 1
            }
          }

      - name: Check for broken links
        run: |
          echo "Checking for internal link consistency..."
          Get-ChildItem public/*.html | ForEach-Object {
            $file = $_.FullName
            echo "Checking links in $file"
            $content = Get-Content $file -Raw
            $matches = [regex]::Matches($content, 'href="([^"]*\.html)"')
            foreach ($match in $matches) {
              $link = $match.Groups[1].Value
              if (Test-Path "public/$link") {
                echo "‚úÖ Link $link is valid"
              } else {
                echo "‚ùå Broken link: $link in $file"
                exit 1
              }
            }
          }

      - name: Validate CSS files
        run: |
          echo "Checking CSS files..."
          Get-ChildItem public/*.css | ForEach-Object {
            echo "‚úÖ CSS file found: $($_.Name)"
          }

      - name: Check file structure
        run: |
          echo "Validating project structure..."
          if (Test-Path "public/index.html") {
            echo "‚úÖ index.html found"
          } else {
            echo "‚ùå Missing index.html"
            exit 1
          }
          
          if (Test-Path "firebase.json") {
            echo "‚úÖ firebase.json found"
          } else {
            echo "‚ùå Missing firebase.json"
            exit 1
          }

  # Build and Deploy (only on main branch)
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEVOPS_LABS_TEAM_7_C6712 }}
          channelId: live
          projectId: devops-labs-team-7-c6712

  # Security and Performance Checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Security scan
        run: |
          echo "Running security checks..."
          # Check for sensitive information
          $sensitiveFiles = Get-ChildItem public/ -Recurse -Include "*.html","*.js" | Where-Object { 
            $content = Get-Content $_.FullName -Raw
            $content -match "password|secret|key"
          }
          if ($sensitiveFiles) {
            echo "‚ö†Ô∏è  Potential sensitive information found in: $($sensitiveFiles.Name)"
          } else {
            echo "‚úÖ No sensitive information detected"
          }

      - name: Check file sizes
        run: |
          echo "Checking file sizes..."
          Get-ChildItem public/* | ForEach-Object {
            $size = $_.Length
            if ($size -gt 1048576) {  # 1MB
              echo "‚ö†Ô∏è  Large file detected: $($_.Name) ($size bytes)"
            } else {
              echo "‚úÖ $($_.Name) size OK ($size bytes)"
            }
          }

  # Notification (optional)
  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üöÄ Deployment successful! Website is live at: https://devops-labs-team-7-c6712.web.app"
          else
            echo "‚ùå Deployment failed. Check the logs for details."
          fi
